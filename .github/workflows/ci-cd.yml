name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Job 1: Frontend Testing
  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --run

  # Job 2: Backend Testing
  backend-lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci
        
    - name: Check backend syntax
      run: |
        cd backend
        node -c server.js
        node -c routes/api.js

  # Job 3: Docker Build Test
  docker-build:
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build backend image
      run: |
        cd backend
        docker build -t fullstack-backend:latest .
        
    - name: Build frontend image
      run: |
        cd frontend
        docker build -t fullstack-frontend:latest .

  # Job 4: Deploy to Production
  deploy:
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-lint, docker-build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Navigate to project directory
          cd fsd-CICD
          
          # Pull latest code
          git pull origin main
          
          # Stop containers
          docker-compose down
          
          # Remove old images
          docker system prune -f
          
          # Build and start new containers
          docker-compose up -d --build
          
          # Wait for containers to start
          sleep 30
          
          # Restart nginx to ensure proxy works
          sudo systemctl restart nginx
          
          # Check deployment status
          docker ps
          echo "ðŸš€ Deployment completed successfully!"

  # Job 5: Deployment Verification
  verify-deployment:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Wait for deployment
      run: sleep 60
      
    - name: Verify HTTPS endpoint
      run: |
        curl -f https://ezukatechnology.com || exit 1
        echo "âœ… HTTPS endpoint working"
        
    - name: Verify API endpoint
      run: |
        curl -f https://ezukatechnology.com/api/users || exit 1
        echo "âœ… API endpoint working"
        
    - name: Deployment success notification
      run: |
        echo "ðŸŽ‰ Auto-deployment successful!"
        echo "âœ… Website: https://ezukatechnology.com"
        echo "âœ… API: https://ezukatechnology.com/api/users"
        echo "âœ… All systems operational"